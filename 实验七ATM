#include<stdio.h>
#include <string.h>

struct Account//定义账户
{   
	char name[100];
	char idCard[19];
	char username[100];
	char password[7];
	char tel[12];
	char balance[100];
	float money;
};

typedef struct Account Account;

Account a[100];
int i = 0;


void signIn()//登录
{
	FILE* fp = fopen("D:/atm.txt", "r");
	if (fp != NULL)
	{
		int j = 0;
		while (!feof(fp))
		{
			fscanf(fp,"%s\t%s\t%s\t%s\t%s\n",
				a[j].name, a[j].idCard, a[j].username, a[j].password, a[j].tel);
			j++;
		}
	}
}


void signUp1()//开户（中文）
{
	printf("请输入姓名：\n");
	scanf_s("%s", a[i].name, sizeof(a[i].name));

	printf("请输入身份证：\n");
	scanf_s("%s", a[i].idCard, sizeof(a[i].idCard));

	printf("请输入账号：\n");
	scanf_s("%s", a[i].username, sizeof(a[i].username));

	printf("请输入密码：\n");
	scanf_s("%s", a[i].password, sizeof(a[i].password));

	printf("请输入电话：\n");
	scanf_s("%s", a[i].tel, sizeof(a[i].tel));

	a[i].money = 0.0f;
	

	FILE* fp = fopen("D:/atm.txt", "a");//存入文件（a表示追加写入）
	if (fp != NULL)
	{
		fprintf(fp, "%s\t%s\t%s\t%s\t%s\n",
			a[i].name, a[i].idCard, a[i].username, a[i].password, a[i].tel);
		fclose(fp);
	}

	i++;
	printf("注册成功!\n");
	printf("请继续按菜单操作\n");
}

void signUp2()//开户（英文）
{
	printf("Please enter your name：\n");
	scanf_s("%s", a[i].name, sizeof(a[i].name));

	printf("Please enter your ID number：\n");
	scanf_s("%s", a[i].idCard, sizeof(a[i].idCard));

	printf("Please enter the account number：\n");
	scanf_s("%s", a[i].username, sizeof(a[i].username));

	printf("Please input a password：\n");
	scanf_s("%s", a[i].password, sizeof(a[i].password));

	printf("Please enter your mobile number：\n");
	scanf_s("%s", a[i].tel, sizeof(a[i].tel));

	a[i].money = 0.0f;


	FILE* fp = fopen("D:/atm.txt", "a");//存入文件（a表示追加写入）
	if (fp != NULL)
	{
		fprintf(fp, "%s\t%s\t%s\t%s\t%s\n",
			a[i].name, a[i].idCard, a[i].username, a[i].password, a[i].tel);
		fclose(fp);
	}
	i++;

	printf("Created successfully!\n");
	printf("Please continue to press the menu\n");
}

void printAllAccount()//打印所有账户
{
	for (int j = 0; j < i; j++)
	{
		printf("%s\t%s\n", a[j].name, a[j].username);
	}
}

void showChineseMenu()//中文菜单
{
	printf("按1,登录\n");
	printf("按2,开户\n");
	printf("按3,退出\n");
	printf("按4,打印所有帐户\n");
	while (1)
	{
		char c;
		scanf_s(" %c", &c, sizeof(c));
		if (c == '1')
		{
			signIn();
		}
		else if (c == '2')
		{
			signUp1();
		}
		else if (c == '3')
		{
			return;
		}
		else if (c == '4')
		{
			printAllAccount();
		}
	}
}

void showEnglishMenu()//英文菜单
{
	printf("A,log on\n");//登录
	printf("B,establish an account\n");//开户
	printf("C,logout\n");//退出

	while (1)
	{
		char c;
		scanf_s(" %c", &c, sizeof(c));
		if (c == 'A')
		{
			signIn();
		}
		else if (c == 'B')
		{
			signUp2();
		}
		else if (c == 'C')
		{
			return;
		}
	}
}

int main()
{
	printf("按1,显示中文\n");
	printf("Input 2,Show English\n");
	char c;
	scanf_s("%c", &c, sizeof(c));
	if (c == '1')
	{
		//显示中文菜单 
		showChineseMenu();
	}
	else if (c == '2')
	{
		//显示英文菜单 
		showEnglishMenu();
	}
	return 0;
}
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>

struct Account
{
	char username[100];
	char password[100];
	float money;
	
	struct Account * next;
};
typedef struct Account Account;

Account * head=NULL;
Account * tail=NULL;
Account * curAccount=NULL;//记录当前账户 

struct TransactionRecord
{
	char username[100];
	time_t timestamp;//时间戳 
	int type;//交易类型 0-取钱，1-存钱
	float amount;//数额 
	
	struct TransactionRecord * next; 
}; 
typedef struct TransactionRecord TR;

TR * trHead=NULL;
TR * trTail=NULL; 

void drawMoney()
{
	printf("请输入取款金额：");
	int money;
	scanf("%d",&money);
	
	//从账户里面扣钱 
	if(money>curAccount->money)
	{
		printf("余额不足！\n");
	}
	else
	{
		curAccount->money=curAccount->money - money;
		printf("取款成功！\n");
		
		//记录交易记录 创建结点，赋值初始化，添加结点到链表
		TR * newNode=(TR*)malloc(sizeof(TR));
		
		newNode->next=NULL;
		strcpy(newNode->username,curAccount->username);
		newNode->type=0;
		newNode->amount=money;
		newNode->timestamp=time(NULL);
		
		if(trHead==NULL)
		{
			trHead=newNode;
			trTail=newNode; 
		}
		else
		{
			trTail->next=newNode;
			trTail=newNode;
		}
	}
	
}

void loadData()
{
	FILE* fp=fopen("D:/atm.txt","r"); 
	if(fp!=NULL)
	{
		while(!feof(fp))
		{
			//创建结点
			Account *newNode=(Account *)malloc(sizeof(Account));
			
			//结点初始化
			newNode->next=NULL;
			fscanf(fp,"%s %s %f\n",newNode->username,newNode->password,&newNode->money);
			
			//添加结点到链表 
			if(head==NULL)
			{
				head=newNode;
				tail=newNode;
			}
			else
			{
				tail->next=newNode;
				tail=newNode;
			}
		}
		fclose(fp); 
	}
}

int findAccount(Account a)
{
	Account * curP=head;
	while(curP!=NULL)
	{
		if((strcmp(curP->username,a.username)==0)&(strcmp(curP->password,a.password)==0))
		{
			curAccount=curP;
			return 1;
		}
	}
	return 0;
}

void signIn()
{
	Account a; 
	printf("请输入账号：");
	scanf("%s",a.username);
	
	printf("请输入密码：");
	scanf("%s",a.password);
	
	if(findAccount(a))
	{
		printf("登录成功！\n");
	}
	else
	{
		printf("登录失败！\n");
	}
	
} 

void saveMoney()
{
	printf("请输入存钱金额：");
	int money;
	scanf("%d",&money);
	curAccount->money+=money;
	printf("存款成功！\n");
}

void saveTransactionRecord()
{
	FILE* fp=fopen("D:/transation_record.txt","w");
	TR* curP=trHead;
	while(curP!=NULL)
	{
		fprintf(fp,"%s %ld %d %f\n",curP->username,curP->timestamp,curP->type,curP->amount);
		curP=curP->next;
	}
	fclose(fp);
}

void transfer()
{
	//输入对方帐户
	printf("请输入对方账户：");
	char otherUsername[100];
	scanf("%s", otherUsername);
	
	//验证账户合法性
	
	//输入转账金额
	
	//验证金额合法性
	
	//转账(当前账户余额减少，对方账户余额增多) 
	
	//提示转账成功 
}

int main()
{
	loadData();
	signIn(); 
	
	//drawMoney();
	
	//saveMoney();
	
	transfer();
	
	saveTransactionRecord(); 
	
	return 0;
}

